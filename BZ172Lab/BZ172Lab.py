"""
The main purpose of having this simple script is to be more familiar with data
processing with pandas and the side effect is having a 'tool' to convert the
two DDF files generated by M172 IDE into one modbus register map file by csv
format which is easy to be imported in excel.

2021.02.17 First created
2021.02.21 Create separate files for register map doc and code generation
"""

import pandas as pd

def createDDF(variable_filename, e2prom_filename) :
    '''
    Parameters
    ----------
    variable_filename : TYPE
        DESCRIPTION.
    e2prom_filename : TYPE
        DESCRIPTION.

    Returns
    -------
    None.

    '''
    # load sheets
    dfVariables = pd.read_csv(variable_filename,
                              encoding='ansi',
                              dtype=str,
                              delimiter=',',
                              usecols=[0, 1, 3, 5, 6, 7, 8, 11, 14, 15, 16])
    dfConfigurations = pd.read_csv(e2prom_filename,
                                   encoding='ansi',
                                   dtype=str,
                                   usecols=[0, 1, 3, 5, 6, 7, 8, 11, 14, 15])

    # Add 'RW' to dfConfigurations
    ReadOnly = ['RW'] * len(dfConfigurations)
    dfConfigurations.insert(loc=9, column='ReadOnly', value=ReadOnly)

    # Combine the two dataframes and replace 'na' with blank
    ddf = pd.concat([dfVariables, dfConfigurations])
    ddf = ddf.fillna('')

    # Remove 'BZ...' items
    ddf = ddf.drop(index=ddf[ddf['Name'].str.match('BZ')].index)

    # Fill the 'Size' of 16bit items with '1'
    ddf.loc[ddf['Size'] == '', 'Size'] = '1'

    # Remove 'bz' and 'Cfg' from names
    ddf.Name = ddf.Name.str.replace('bz', '')
    ddf.Min = ddf.Min.str.replace('bz', '')
    ddf.Max = ddf.Max.str.replace('bz', '')

    # Sort by address
    ddf.loc[:, 'Address'] = ddf.Address.astype('ushort')
    ddf = ddf.sort_values(by='Address', ascending=True)

    # Update column names
    ddf.columns = ['Address', 'DataPoint', 'Type', 'Size', 'Default', 'Min',
                   'Max', 'Unit', 'RW', 'Description', 'Note']

    # Update index
    ddf.index=[x for x in range(1, len(ddf) + 1)]

    # save to csv file with utf-8 format by default
    ddf.to_csv('BZ172LabDDF.csv', index_label='NO')

    return ddf;

def createbzMBDevice_BZ172Lab(ddf) :
    with open("bzMBDevice_BZ172Lab.h", "w") as file:
        strContent = """
/**
 * This file is generated by BZ172Lab.py according to the DDF file.
 *
 * DON'T CHANGE IT MANUALLY!
 */
#ifndef _BZMBDEVICE_BZ172LAB_H_
#define _BZMBDEVICE_BZ172LAB_H_

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

#include "bzObject.h"
#include "bzMBDevice.h"

typedef struct _tagMBBZ172LabVariables {

"""
        for i in range(0, len(ddf) - 1):
            if (ddf.Type.iloc[i] == 'Signed 16-bit') :
                strContent += '    bzI16 ' + ddf.DataPoint.iloc[i] + '[1];\n'
            elif (ddf.Type.iloc[i] == 'Unsigned 16-bit'):
                strContent += '    bzU16 ' + ddf.DataPoint.iloc[i] + '[1];\n'
            elif (ddf.Type.iloc[i] == 'String') :
                max_len = int(ddf.Size.iloc[i])
                if (max_len % 2) :
                    max_len += 1
                else :
                    max_len += 2
                strContent += str('    bzU8  ' + ddf.DataPoint.iloc[i] +
                              '[{0}];\n'.format(max_len))
            else:
                pass
        strContent += """
} MBBZ172LabVariables;
"""

        strContent += '\n#define MAX_BZ172LAB_MB_REGISTERS {0}\n'.format(len(ddf))

        strContent += """
typedef struct _tagMBBZ172LabDevice {
    MBBZ172LabVariables MBVariables;
    bzModbusRegister    MBRegisters[MAX_BZ172LAB_MB_REGISTERS];
    bzModbusDevice      Dev;
} MBBZ172LabDevice;

_public_ void MBBZ172LabDevice_ctor(MBBZ172LabDevice*, bzU8);
_public_ void MBBZ172LabDevice_dtor(MBBZ172LabDevice*);


#ifdef __cplusplus
}
#endif

#endif  // _BZMBDEVICE_BZ172LAB_H_

"""
        file.write(strContent)
        file.close()

    with open("bzMBDevice_BZ172Lab.c", "w") as file:
        strContent = """
/**
 * This file is generated by BZ172Lab.py according to the DDF file.
 *
 * DON'T CHANGE IT MANUALLY!
 */
#include "bzMBDevice_BZ172Lab.h"

_public_ void MBBZ172LabDevice_ctor(MBBZ172LabDevice* me, bzU8 id) {

"""
        for i in range(0, len(ddf) - 1):
            if (ddf.Type.iloc[i] == 'String') :
                sz = int(ddf.Size.iloc[i])
                if (sz % 2) :
                    sz += 1
                else :
                    sz += 2
                sz /= 2
            else:
                sz = 1
            strLn = '    bzModbusRegister_new(me->MBRegisters[{0}], '\
                    'bzBusProtocol_MB_HoldingRegister, {1}, {2}, '\
                    'me->MBVariables.{3});\n'.format(i,
                                                     int(ddf.Address.iloc[i]),
                                                     int(sz),
                                                     ddf.DataPoint.iloc[i])
            strContent += strLn
        strContent += """

    bzModbusDevice_ctor(&me->Dev, id);

    me->Dev.Registers = me->MBRegisters;
    me->Dev.NumberOfRegisters = MAX_BZ172LAB_MB_REGISTERS;
}

_public_ void MBBZ172LabDevice_dtor(MBBZ172LabDevice* me) {}
"""
        file.write(strContent)
        file.close()
# %%
if __name__ == '__main__':
    ddf = createDDF("BZ172Lab Status Variables.CSV",
                    "E2PROM Parameters.CSV")
    createbzMBDevice_BZ172Lab(ddf)

